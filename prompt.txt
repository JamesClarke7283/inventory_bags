The following are the relevant source code files:

// /home/impulse/Projects/Lua/minetest_mods/inventory_bags/init.lua
modname = "inventory_pouches"
modpath = minetest.get_modpath(modname)
storage = minetest.get_mod_storage()

dofile(modpath .. "/functions.lua")
dofile(modpath .. "/main.lua")
dofile(modpath .. "/recipes.lua")

functions.restore_all_pouches()


// /home/impulse/Projects/Lua/minetest_mods/inventory_bags/functions.lua
functions = {}

inventory_size = 27
local inventories = {}

local function inventory_to_table(inv)
    minetest.log("action", "[inventory_pouches] Entering function inventory_to_table")
    local inv_table = {}
    for i, stack in ipairs(inv:get_list("main")) do
        local stack_table = stack:to_table()
        if stack_table then  -- Only add to inv_table if stack_table is not nil
            inv_table[i] = stack_table
            minetest.log("action", "[inventory_pouches] Added stack to table: " .. minetest.serialize(inv_table[i]))
        end
    end
    return inv_table
end

local function table_to_inventory(inv_table, inv)
    for i, stack_table in ipairs(inv_table) do
        inv:set_stack("main", i, ItemStack(stack_table))
        minetest.log("action", "[inventory_pouches] Added stack to inventory: " .. minetest.serialize(stack_table))
    end
end

function functions.get_next_id()
    local highest_id = tonumber(storage:get_string("highest_id")) or 0
    highest_id = highest_id + 1
    storage:set_string("highest_id", tostring(highest_id))
    return highest_id
end

function functions.update_inventory(itemstack)
    local meta = itemstack:get_meta()
    local id = meta:get_string("id")
    local inv = inventories[id]
    if inv then
        local inv_table = inventory_to_table(inv)
        local inv_string = minetest.serialize(inv_table)
        minetest.log("action", "[inventory_pouches] Updated inventory string: " .. inv_string .. " for pouch with ID: " .. id)
        meta:set_string("inventory", inv_string)
        storage:set_string("pouch_" .. id, inv_string)
    end
    minetest.log("action", "[inventory_pouches] Updated inventory for pouch with ID: " .. id)
end

function functions.restore_inventory(itemstack, inv)
    local id = itemstack:get_meta():get_string("id")
    local inv_table_string = storage:get_string("pouch_" .. id)
    minetest.log("action", "[inventory_pouches] Restoring inventory string: " .. inv_table_string .. " for pouch with ID: " .. id)
    if inv_table_string ~= "" then
        local inv_table = minetest.deserialize(inv_table_string)
        table_to_inventory(inv_table, inv)
    end
end

function functions.create_pouch_inventory(itemstack)
    local meta = itemstack:get_meta()
    local id = meta:get_string("id")
    local inv = inventories[id]
    if not inv then
        inv = minetest.create_detached_inventory("pouch_inventory_" .. id, {
            on_put = function(inv)
                functions.update_inventory(itemstack)
            end,
            on_take = function(inv)
                functions.update_inventory(itemstack)
            end
        })
        inv:set_size("main", inventory_size)  -- Adjusted inventory size here
        inventories[id] = inv
        functions.restore_inventory(itemstack, inv)
        functions.update_inventory(itemstack)
        minetest.log("action", "[inventory_pouches] Created new pouch inventory with ID: " .. id)
    else
        minetest.log("action", "[inventory_pouches] Inventory with ID: " .. id .. " already exists.")
    end
    return inv
end


function functions.restore_all_pouches()
    local highest_id = tonumber(storage:get_string("highest_id")) or 0
    for id = 1, highest_id do
        local inv_table_string = storage:get_string("pouch_" .. id)
        if inv_table_string ~= "" then
            local inv = minetest.create_detached_inventory("pouch_inventory_" .. id, {
                on_put = function(inv)
                    local itemstack = ItemStack("inventory_pouches:pouch")
                    itemstack:get_meta():set_string("id", tostring(id))
                    functions.update_inventory(itemstack)
                end,
                on_take = function(inv)
                    local itemstack = ItemStack("inventory_pouches:pouch")
                    itemstack:get_meta():set_string("id", tostring(id))
                    functions.update_inventory(itemstack)
                end
            })
            inv:set_size("main", inventory_size)  -- Adjusted inventory size here
            inventories[id] = inv
            local inv_table = minetest.deserialize(inv_table_string)
            table_to_inventory(inv_table, inv)
            minetest.log("action", "[inventory_pouches] Restored pouch inventory with ID: " .. id)
        end
    end
end



// /home/impulse/Projects/Lua/minetest_mods/inventory_bags/main.lua
dofile(minetest.get_modpath("inventory_pouches") .. "/functions.lua")

minetest.register_craftitem("inventory_pouches:pouch", {
    description = "Inventory Pouch",
    inventory_image = "inventory_pouches_pouch.png",
    stack_max = 1,
    on_use = function(itemstack, user, pointed_thing)
        local meta = itemstack:get_meta()
        local id = meta:get_string("id")
        if id == "" then
            id = functions.get_next_id()
            meta:set_string("id", tostring(id))
            itemstack:set_name("inventory_pouches:pouch")
        end
        local inv = functions.create_pouch_inventory(itemstack)
        local formspec = "size[9,8.5]" ..
        "label[0,0.1;" .. minetest.formspec_escape(minetest.colorize("#313131", "Inventory pouch")) .. "]" ..
        "listcolors[#AAAAAA;#888888;#FFFFFF]" ..
        "list[detached:pouch_inventory_" .. id .. ";main;0,0.5;9,3;]" ..
        "list[current_player;main;0,4.0;9,3;9]" ..
        "list[current_player;main;0,7.74;9,1;]" ..
        "listring[detached:pouch_inventory_" .. id .. ";main]" ..
        "listring[current_player;main]"

        minetest.show_formspec(user:get_player_name(), "inventory_pouches:pouch" .. id, formspec)
        minetest.log("action", "[inventory_pouches] Opened pouch inventory with ID: " .. id)
        return itemstack
    end,
})

minetest.register_on_player_receive_fields(function(player, formname, fields)
    local id = string.match(formname, "^inventory_pouches:pouch(%d+)")
    if id and fields.quit then
        local inv_list = player:get_inventory():get_list("main")
        for i, itemstack in ipairs(inv_list) do
            if itemstack:get_name() == "inventory_pouches:pouch" then
                local meta = itemstack:get_meta()
                if meta:get_string("id") == id then
                    functions.update_inventory(itemstack)
                    minetest.log("action", "[inventory_pouches] Updated pouch inventory with ID: " .. id)
                    break
                end
            end
        end
    end
end)

minetest.register_on_shutdown(function()
    for _, player in ipairs(minetest.get_connected_players()) do
        local inv_list = player:get_inventory():get_list("main")
        for i, itemstack in ipairs(inv_list) do
            if itemstack:get_name() == "inventory_pouches:pouch" then
                functions.update_inventory(itemstack)
                minetest.log("action", "[inventory_pouches] Updated pouch inventory at shutdown for player: " .. player:get_player_name())
            end
        end
    end
end)

functions.restore_all_pouches()


// /home/impulse/Projects/Lua/minetest_mods/inventory_bags/recipes.lua
local functions = dofile(modpath .. "/functions.lua")

local has_default_mod = minetest.get_modpath("default")
local has_mcl_core_mod = minetest.get_modpath("mcl_core")

if has_default_mod then
    minetest.register_craft({
        output = "inventory_pouches:pouch",
        recipe = {
            {"default:string", "default:string", "default:string"},
            {"default:string", "default:chest", "default:string"},
            {"default:string", "default:string", "default:string"},
        }
    })
elseif has_mcl_core_mod then
    minetest.register_craft({
        output = "inventory_pouches:pouch",
        recipe = {
            {"mcl_mobitems:string", "mcl_mobitems:string", "mcl_mobitems:string"},
            {"mcl_mobitems:string", "mcl_chests:chest", "mcl_mobitems:string"},
            {"mcl_mobitems:string", "mcl_mobitems:string", "mcl_mobitems:string"},
        }
    })
end



The following are the instructions for the project:

// /home/impulse/Projects/Lua/minetest_mods/inventory_bags/README.md
# Inventory Pouches

Adds inventory pouches. Each bag is its own separate inventory and can be shared among players.


